# This code was auto-generated by an LLM based on a detailed prompt.
# LLM: Google Gemini

from django.db import models
from django.contrib.auth.models import User

# Helper function for avatar uploads
def avatar_upload_path(instance, filename):
    # file will be uploaded to MEDIA_ROOT/avatars/user_<id>/<filename>
    return f'avatars/user_{instance.user.id}/{filename}'

# Helper function for post media uploads
def post_media_upload_path(instance, filename):
    # file will be uploaded to MEDIA_ROOT/post_media/post_<id>/<filename>
    return f'post_media/post_{instance.post.id}/{filename}'

class Profile(models.Model):
    class UserType(models.TextChoices):
        SERF = 'SERF', 'Serf'
        ADMIN = 'ADMIN', 'Administrator'

    user = models.OneToOneField(User, on_delete=models.CASCADE)
    user_type = models.CharField(
        max_length=10,
        choices=UserType.choices,
        default=UserType.SERF
    )
    bio = models.TextField(blank=True)
    avatar = models.ImageField(upload_to=avatar_upload_path, null=True, blank=True)

    def __str__(self):
        return f'{self.user.username} Profile'

class ModerationReason(models.Model):
    reason_text = models.CharField(max_length=255)

    def __str__(self):
        return self.reason_text

class Post(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    # Moderation fields
    is_hidden = models.BooleanField(default=False)
    hidden_at = models.DateTimeField(null=True, blank=True)
    hidden_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='suppressed_posts'
    )
    hidden_reason = models.ForeignKey(
        ModerationReason,
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )

    def __str__(self):
        return f'Post {self.id} by {self.author.username}'

class Comment(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    # Moderation fields
    is_hidden = models.BooleanField(default=False)
    hidden_at = models.DateTimeField(null=True, blank=True)
    hidden_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='suppressed_comments'
    )
    hidden_reason = models.ForeignKey(
        ModerationReason,
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )

    def __str__(self):
        return f'Comment {self.id} by {self.author.username} on {self.post.id}'

class PostMedia(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    media_file = models.ImageField(upload_to=post_media_upload_path)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'Media for post {self.post.id}'
